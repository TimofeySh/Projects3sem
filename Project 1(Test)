#include <iostream>
using namespace std;
class LorentzVector {
private:
double x, y, z, t;

public:
LorentzVector() = default;
LorentzVector(double x_, double y_, double z_, double t_){
x = x_;
y = y_;
z = z_;
t = t_;
};
double getx() {
return x;
}
double gety() {
return y;
}
double getz() {
return z;
}
double gett() {
return t;
}

void operator+=(const LorentzVector& l) {
x += l.x;
y += l.y;
z += l.z;
t += l.t;
}
void operator-=(const LorentzVector l) {
x -= l.x;
y -= l.y;
z -= l.z;
t -= l.t;
}
void operator*=(double a){
x = x*a;
y = y*a;
z = z*a;
t = t*a;
}
LorentzVector operator+(const LorentzVector l){
LorentzVector b;
b.x = l.x+x;
b.y = l.y+y;
b.z = l.z+z;
b.t = l.t+t;

return b;
}
LorentzVector operator-(const LorentzVector l){
LorentzVector b;
b.x = x - l.x;
b.y = y - l.y;
b.z = z - l.z;
b.t = t - l.t;

return b;
}
LorentzVector operator*(double a){
LorentzVector b;
b.x = x*a;
b.y = y*a;
b.z = z*a;
b.t = t*a;

return b;
}
friend LorentzVector operator*(double a, const LorentzVector l){
LorentzVector b;
b.x = l.x*a;
b.y = l.y*a;
b.z = l.z*a;
b.t = l.t*a;

return b;
}
void operator-(){
x = -x;
y = -y;
z = -z;
t = -t;
}
friend ostream& operator«(ostream& os, const LorentzVector l){
os « l.x « " " « l.y « " " « l.z «" "« l.t«endl;
return os;
}
friend istream& operator»(istream& is, LorentzVector& l){
is » l.x » l.y» l.z » l.t;
return is;
}
double operator*(LorentzVector l){
return x*l.x + y*l.y + z*l.z + t*l.t;
}


};
int main(){
double a;
LorentzVector l1, l2, l3;
cout « "First Lorentz Vector Input";
cin » l1;
cout « "Second Lorentz Vector Input";
cin » l2;
cout « "sum is: " « l1 + l2 « "subtraction is:" « l1 - l2;
system("pause");


return 0;

